from fastapi import FastAPI, HTTPException
from pydantic import BaseModel, Field
from typing import List, Optional
from datetime import datetime
from pymongo import MongoClient
from bson import ObjectId

# Připojení k MongoDB
client = MongoClient('mongodb://root:example@localhost:27017/')
db = client['event_planner']

app = FastAPI()

# Pydantic model pro event
class Event(BaseModel):
    event_id: str
    title: str
    start_time: datetime
    end_time: datetime
    attendees: List[str]
    status: Optional[str] = "pending"

# Model pro přidání a aktualizaci události
class EventUpdate(BaseModel):
    title: Optional[str]
    start_time: Optional[datetime]
    end_time: Optional[datetime]
    attendees: Optional[List[str]]
    status: Optional[str]

# Model pro vytvoření události
class EventCreate(BaseModel):
    title: str
    start_time: datetime
    end_time: datetime
    attendees: List[str]
    status: Optional[str] = "pending"


class UserCreate(BaseModel):
    username: str
    email: str

# Endpoint pro vytvoření uživatele
@app.post("/users/")
def create_user(user: UserCreate):
    # Zkontrolujeme, zda už uživatel s tímto emailem existuje
    existing_user = db.users.find_one({"email": user.email})
    if existing_user:
        raise HTTPException(status_code=400, detail="User with this email already exists")

    # Vytvoření nového uživatelského dokumentu
    new_user = {
        "_id": str(ObjectId()),  # Unikátní ID uživatele
        "username": user.username,
        "email": user.email,
        "events": []  # Prázdný seznam událostí
    }

    # Vložení nového uživatele do databáze
    db.users.insert_one(new_user)

    return {"message": "User created successfully", "user_id": new_user["_id"]}

# Přidání nové události do profilu uživatele
@app.post("/users/{user_id}/events/")
def add_event(user_id: str, event: EventCreate):
    new_event = event.dict()
    new_event["event_id"] = str(ObjectId())  # Generování unikátního event_id
    result = db.users.update_one(
        {"_id": user_id},
        {"$push": {"events": new_event}}
    )
    if result.modified_count == 0:
        raise HTTPException(status_code=404, detail="User not found")
    return {"message": "Event added", "event": new_event}

# Aktualizace konkrétní události uživatele
@app.put("/users/{user_id}/events/{event_id}")
def update_event(user_id: str, event_id: str, event_data: EventUpdate):
    update_fields = {f"events.$.{k}": v for k, v in event_data.dict().items() if v is not None}
    result = db.users.update_one(
        {"_id": user_id, "events.event_id": event_id},
        {"$set": update_fields}
    )
    if result.matched_count == 0:
        raise HTTPException(status_code=404, detail="User or event not found")
    return {"message": "Event updated"}

# Smazání události z profilu uživatele
@app.delete("/users/{user_id}/events/{event_id}")
def delete_event(user_id: str, event_id: str):
    result = db.users.update_one(
        {"_id": user_id},
        {"$pull": {"events": {"event_id": event_id}}}
    )
    if result.modified_count == 0:
        raise HTTPException(status_code=404, detail="User or event not found")
    return {"message": "Event deleted"}

# Získání všech událostí konkrétního uživatele
@app.get("/users/{user_id}/events/", response_model=List[Event])
def get_user_events(user_id: str):
    user = db.users.find_one({"_id": user_id}, {"events": 1, "_id": 0})
    if not user:
        raise HTTPException(status_code=404, detail="User not found")
    return user.get("events", [])
